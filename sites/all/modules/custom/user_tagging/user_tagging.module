<?php
// Done by Subham dt.28-05-2025
function user_tagging_menu() {
  $items = array();

  $items['user-tagging'] = array(
    'title' => 'Form For User Tagging',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_tagging_form'),
    'file' => 'user_tagging_form.inc',
    'access arguments' => array('administer_user_tagging'),
	);

  $items['flat-wise-user-info'] = array(
    'title' => 'Form For User Tagging',
    'page callback' => 'flat_wise_user_info',
    // 'page arguments' => array(1,2),
    'file' => 'flat_wise_user_info.inc',
    'access arguments' => array('administer_user_tagging'),
	);
  
  $items['flat-wise-user-info-details'] = array(
    'title' => 'Form For User Tagging',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('flat_wise_user_details',1),
    'file' => 'flat_wise_user_info.inc',
    'access arguments' => array('administer_user_tagging'),
	);

  $items['flat-wise-user-info'] = array(
    'title' => 'Form For User Tagging',
    'page callback' => 'flat_wise_user_info',
    'page arguments' => array(1,2),
    'file' => 'flat_wise_user_info.inc',
    'access arguments' => array('administer_user_tagging'),
	);


  $items['tagged-user-list'] = array(
    'title' => 'Form For User Tagging',
    'page callback' => 'tagged_user_list',
    'page arguments' => array(1),
    'file' => 'flat_wise_user_info.inc',
    'access arguments' => array('administer_user_tagging'),
	);

  return $items;
}

function user_tagging_permission() {
  return array(
    'administer_user_tagging' => array(
      'title' => t('Administer User Tagging'),
      'description' => t('Perform administer for User Tagging.')
    )
  );	
}

function get_flat_info_by_id($flat_id_en = 0){

  $flat_id = decrypt_url($flat_id_en);

  if($flat_id !=0){
    
    $query = db_select('housing_flat','hf');
    $query->fields('hf',array('floor','flat_no','flat_id'));
    $query->innerJoin('housing_estate', 'he', 'he.estate_id = hf.estate_id');
    $query->fields('he',array('estate_name'));
    $query->innerJoin('housing_block', 'hb', 'hb.block_id = hf.block_id');
    $query->fields('hb',array('block_name'));
    $query->innerJoin('housing_flat_type', 'hft', 'hft.flat_type_id = hf.flat_type_id');
    $query->fields('hft',array('flat_type'));
    $query->condition('hf.flat_id', $flat_id); 
    $result = $query->execute()->fetchObject();
 
    $final_result = 'Estate: '.$result->estate_name. ', Block: '.$result->block_name.', Floor: '.$result->floor.', Flat Type: '.$result->flat_type.', Flat No.: '.$result->flat_no;
  }else{
    $final_result = 'No Record Found!';
  }

  return $final_result;
}

/*Fetch Flat List*/
function rhe_list_fetch() {
    $rhe_options = array(''=>'- Select -');
    $query = db_select('housing_estate', 'he')->fields('he');
    $query->orderBy('estate_name','ASC');
    $result = $query->execute();
    foreach($result as $val) {
        $str = $val->estate_name;
        if($val->estate_address != null){
            $str = $str.' | '.$val->estate_address;
        }
        $rhe_options[$val->estate_id] = $str;
    }
    
    return $rhe_options;
}

/*Fetch Floor Number*/
function fetch_floor_no($rhe_name = '', $flat_type = '', $block_name = '') {
    $floor_no_options = array('' => '- Select -');
    if($rhe_name !== '' && $flat_type !== '' && $block_name !== ''  && is_numeric($rhe_name) && is_numeric($flat_type) && is_numeric($block_name)) {
        $query = db_select('housing_flat', 'hf');
        $query->fields('hf', array('flat_id', 'estate_id', 'flat_type_id', 'block_id','floor'));
        $query->condition('hf.estate_id', $rhe_name, '=');
        $query->condition('hf.flat_type_id', $flat_type, '=');
        $query->condition('hf.block_id', $block_name, '=');

        $query->orderBy('flat_id', 'ASC');
        $result = $query->execute();
        
        if($result->rowCount() > 0) {
            foreach($result as $val) {
                $floor_no_options[$val->floor] = $val->floor;
            }
            return $floor_no_options;
        } else {
            $floor_no_options[''] = 'No Data Found';
            return $floor_no_options;		
        }
    }
}

/*Fetch Flat Number*/
function fetch_flat_no($rhe_name = '', $flat_type = '', $block_name = '', $floor_no = '', $flat_status = '') {
    $flat_no_options = array('' => '- Select -');
    if($rhe_name !== '' && $flat_type !== '' && $block_name !== '' && $floor_no !== '' && is_numeric($rhe_name) && is_numeric($flat_type) && is_numeric($block_name)) {
        $query = db_select('housing_flat', 'hf');
        $query->fields('hf', array('flat_id', 'estate_id', 'flat_type_id', 'block_id','floor','flat_no'));
        $query->condition('hf.estate_id', $rhe_name, '=');
        $query->condition('hf.flat_type_id', $flat_type, '=');
        $query->condition('hf.block_id', $block_name, '=');
        $query->condition('hf.floor', $floor_no, '=');
        if($flat_status == 1) {
            $query->condition('hf.flat_status_id', 1, '='); // Only active flats
        } 
    
        $query->orderBy('flat_id', 'ASC');
        $result = $query->execute();
        
        if($result->rowCount() > 0) {
            foreach($result as $val) {
                $flat_no_options[$val->flat_id] = $val->flat_no;
            }
            return $flat_no_options;
        } else {
            $flat_no_options[''] = 'No Data Found';
            return $flat_no_options;		
        }
    }
}

/*License Expiry date validation (Expiry Date Should not more than 3 yrs from the date of license issue date)*/
function element_validate_expiry_date($element, &$form_state) {
  if (!empty($form_state['values']['license_issue_date']) && !empty($form_state['values']['license_expiry_date'])) {
    $issue = trim($form_state['values']['license_issue_date']);
    $expiry = trim($form_state['values']['license_expiry_date']);

    $issue_date = DateTime::createFromFormat('d/m/Y', $issue);
    $expiry_date = DateTime::createFromFormat('d/m/Y', $expiry);

    $interval = $issue_date->diff($expiry_date);

    if ($interval->y > 3 || ($interval->y == 3 && ($interval->m > 0 || $interval->d > 0))) {
      form_set_error('license_expiry_date', t('The license expiry date cannot be more than 3 years after the issue date.'));
    }
  }
}

/*DOB Validation {(DOB should before license expiry date)}*/
function element_validate_dob_before_license_issue($element, &$form_state) {
  if (!empty($form_state['values']['dob']) && !empty($form_state['values']['license_issue_date'])) {
    $dob = trim($form_state['values']['dob']);
    $license_issue = trim($form_state['values']['license_issue_date']);

    $dob_date = DateTime::createFromFormat('d/m/Y', $dob);
    $issue_date = DateTime::createFromFormat('d/m/Y', $license_issue);

    if ($dob_date && $issue_date) {
      if ($dob_date > $issue_date) {
        form_set_error('dob', t('Date of Birth cannot be after License Issue Date.'));
      }
    }
    else {
      form_set_error('dob', t('Please enter valid dates in dd/mm/yyyy format.'));
    }
  }
}